#!/usr/bin/perl
use strict;
use CGI;
use Digest::SHA qw(hmac_sha256 sha1_hex);
use GnuPG qw( :algo );
use VM::EC2;

# Create the CGI object
my $query = new CGI;

# Output the HTTP header
print $query->header ( );

# Display the html header
head ( );

# Check if this is the first login, if it is, allow them to initialize their information, otherwise ask for password
my $filename = '/home/gbrowse/keys/keys.gpg';
if(-e $filename){
	check_login( );
} else {
	new_instance ( );
}

#Display the html footer
foot ( );

sub check_login
{
  # Check if they have attempted to sign on. If yes, verify their credentials, otherwise show sign in form
  if ( $query->param("submit") ){
    	verify ( );
  } else {
    	sign_in ( );
  }
  return;
}

sub verify 
{
  # Check to make sure the password is correct, then pass the keys and the endpoint to the admin page
  my $plain_pass = $query->param("password");
  my $password = sha1_hex($plain_pass);

  my $gpg = new GnuPG();
  eval{$gpg->decrypt( ciphertext => "/home/gbrowse/keys/keys.gpg", output => "/home/gbrowse/keys/keys.txt", passphrase => $password, symmetric => 1 )};
  if ($@){
	error_page();
  } else { 
	# The keys are stored in a file which was encrypted by their password
	open (KEYS, '/home/gbrowse/keys/keys.txt') or die $!;	
	my $count = 1;
	my $access_key;
	my $secret_key;
	while (<KEYS>)
	{
	  if ($count == 1){
	    $access_key = $_;
	  } 
	  elsif ($count == 2) {
	    $secret_key = $_;
	  } 
	  $count++;
	}
	close KEYS;
	chomp $access_key;
  	`rm /home/gbrowse/keys/keys.txt`;
  	
	chomp (my $zone = `curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`);
  	chop $zone;  # remove trailing 'a','b'...
  	my $endpoint = "http://ec2.$zone.amazonaws.com";

  	admin_page ($access_key, $secret_key, $endpoint);
  }
  return;
}

sub sign_in
{
 # Display the sign in page
  	my $html = qq{
		<div id="admin_pass" style="margin: 0 auto; width: 430px;">
			<br />
			<form name="pass" action="admin" method="post">
		 	<input type="hidden" name="submit" value="Submit">
			<label class="form_label">Password: </label><input type="password" name="password" />
			<br /><br />
			<input type="submit" name="submit" value="Submit">
			</form>
		</div>};
 	print $html;
	return;
}

sub new_instance
{
  # Process form if submitted; otherwise display it
  if ( $query->param("submit") ) {
    	process_form ( );
  } else {
    	display_form ( );
  }
  return;
}

sub display_form
{
 # During their first sign on, we ask for their keys and a password for future sign-on
  	my $html = qq{
		<div id="amazon_key" style="margin:0 auto; width: 430px;">
			<br />
			<form name="keys" action="admin" method="post">
		 	<input type="hidden" name="submit" value="Submit">
			<label class="form_label">EC2 Access Key: </label><input type="text" name="access_key" /><br />
			<label class="form_label">EC2 Secret Key: </label><input type="text" name="secret_key" />
			<br /><br />
			<label class="form_label">Password: </label><input type="password" name="new_password" />
			<br /><br />
			<div id="submit">
				<input type="submit" name="submit" value="Submit">
			</div>
			</form>
		</div>};
	print $html;
	return;
}

sub process_form
{
  # Check the information provided for the keys and password and then set up the instance to run on those keys by encrypting them in a file
  my $access_key = $query->param("access_key");
  my $secret_key = $query->param("secret_key");
  chomp (my $zone = `curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`);
  chop $zone;  # remove trailing 'a','b'...
  my $endpoint = "http://ec2.$zone.amazonaws.com";

  # Attempt to connect to amazon with the information, if it doesn't work, display an error page
  eval{my $ec2 = VM::EC2->new(-access_key => $access_key,
                      -secret_key => $secret_key,
                      -endpoint   => $endpoint)};

  if ($@){
        error_page();
  } else {
	my $plain_pass = $query->param("new_password");
	my $password = sha1_hex($plain_pass);

  	open (KEYS, '>>/home/gbrowse/keys/keys.txt') or die $!;	
  	print KEYS "$access_key\n";
	print KEYS "$secret_key";
	close KEYS;

	my $gpg = new GnuPG();
	$gpg->encrypt(  plaintext   => "/home/gbrowse/keys/keys.txt",  output  => "/home/gbrowse/keys/keys.gpg", passphrase  => $password, symmetric => 1 );

	# Delete the text form of the file once an encrypted file has been made
	`rm /home/gbrowse/keys/keys.txt`;

	# Call the administration page with the appropriate keys
	admin_page ($access_key, $secret_key, $endpoint);
  	return;
  }
}

sub admin_page{
  my $access_key = shift;
  my $secret_key = shift; 
  my $endpoint = shift;
  chomp (my $instance_id = `curl -s http://169.254.169.254/latest/meta-data/instance-id`);
 

  # Pass the information to display information ~~~
  display_information ($access_key, $secret_key, $endpoint, $instance_id);
  return;
}

sub display_information
{
	
  my $access_key = shift;
  my $secret_key = shift;
  my $endpoint = shift;
  my $instance_id = shift; 

  # Connect to EC2
  my $ec2 = VM::EC2->new(-access_key => $access_key,
                      -secret_key => $secret_key,
                      -endpoint   => $endpoint);

  # Create an array of attached and unattached volumes. Unattached volumes are based off snapshots that do not have corresponding attached volumes
  my @attached_volumes = $ec2->describe_volumes(-filter => {"attachment.instance-id"=>$instance_id}) or die $ec2->error;
  my @unattached_volumes = $ec2->describe_snapshots(-owner => 'self', -filter => {'tag:Role'=>'Species Snapshot'});

  foreach my $attached (@attached_volumes){
	my $count = 0;
	my $snapshot_id = $attached->snapshotId();
	foreach my $unattached(@unattached_volumes){
		if($snapshot_id eq $unattached->snapshotId()){
			splice(@unattached_volumes, $count, 1);
			last;
		}
		$count++;
	}	
  }

  # Find out the number of slaves running for the instance
  my $numOfSlaves = 0;
  my @slave_instances = $ec2->describe_instances(-filter=>{'tag:SlaveOf'=>$instance_id, 'instance-state-name'=>['running', 'pending', 'shutting-down']}); 
  my @running_slave_instances = $ec2->describe_instances(-filter=>{'tag:SlaveOf'=>$instance_id, 'instance-state-name'=>['running', 'pending']});

  my $numOfSlaves = $#running_slave_instances + 1;

  # Display the admin page
  my $html = qq{
  <div id="main">
	<span class="invisible" id="access_key">$access_key</span> 
	<span class="invisible" id="secret_key">$secret_key</span> 
	<span class="invisible" id="endpoint">$endpoint</span> 
	<span class="invisible" id="instance_id">$instance_id</span>
	<div id="slave_container"><br /><br />
		<label for="numOfSlaves">Number of GBrowse slave machines: </label>
		<select id="numOfSlaves" name="$numOfSlaves">
			<option value="0">0</option>
			<option value="1">1</option>
			<option value="2">2</option>
			<option value="3">3</option>
			<option value="4">4</option>
			<option value="5">5</option>
			<option value="6">6</option>
			<option value="7">7</option>
			<option value="8">8</option>
			<option value="9">9</option>
			<option value="10">10</option>
			<option value="11">11</option>
			<option value="12">12</option>
			<option value="13">13</option>
			<option value="14">14</option>
			<option value="15">15</option>
		</select>
		<input id="updateNumOfSlaves" type="button" value="Update" onclick="slaves()" /><br />
		<div id="slave_list">};
		foreach(@slave_instances){
			my $instance_id = $_->instanceId;
			my $status = $_->current_status;
 			my $private_ip = $_->privateIpAddress;
			my $private_dns = $_->privateDnsName;
			my $public_dns = $_->dnsName;
			my $class = 'placement';
			my $bgcolor;

			# set the background color based on the status of the instance
			if ($status eq 'running'){
				$bgcolor = '#E2EBFE';		
				$class = 'slave_container';
			} elsif ($status eq 'pending'){
				$bgcolor = '#eeee33';
			} else {
				$bgcolor = '#ff2233';
			}
		$html .= qq{
			<div class="$class" id="$instance_id" style="background-color:$bgcolor; border:1px solid #BCB79E;">
				<table width=100%>
					<tr>
						<td width=50%>Instance ID: $instance_id</td>
						<td width=50%>IP Address: $private_ip</td>
					</tr><tr>
						<td width=50%>Public DNS: $public_dns</td>
						<td width=50%>Private DNS: $private_dns</td>
					</tr>
				</table>
			</div>	
		};	
		}
	$html .= qq{</div>
	</div>
	<div id="attach_container" style="float:left;">
		<div class="attach" id="unattached">
			<div class="title_bar"><span class="title">Unattached Snapshots</span> <br /></div>
			<div class="sortable unattached" style="float:left;">};
	  		foreach(@unattached_volumes){
				my $snapshot_id = $_->snapshotId;
				my $tags = $_->tags;
				my $name = $tags->{ 'Name' };
				my $info;
				while ( my ($key, $value) = each(%$tags) ) {
					unless($key eq 'Name' or $key eq 'Role'){
						$info .= "$key: $value<br />";
					}
			 	}
				$html .= 
			qq{
			<div class="volume_container" id="$snapshot_id">
				<span value="$snapshot_id" onclick="selected('$snapshot_id')"/>$name
                                my $attaching;
                                # Set the background color based on the status of the volume;
                                if ($status eq 'attached' || $status eq 'busy'){
                                        $bgcolor = '#E2EBFE';
                                        $attaching = 'none';
                                } elsif ($status eq 'attaching'){
                                        $bgcolor = '#eeee33';
                                        $attaching = 'visible';
                                } elsif ($status eq 'detaching'){
                                        $bgcolor = '#ff2233';
                                        $attaching = 'none';
                                }
                                while ( my ($key, $value) = each(%$tags) ) {
                                        unless($key eq 'Name' or $key eq 'Role'){
                                                $info .= "$key: $value<br />";
                                        }
                                }
                                unless($name eq 'Root' || $name eq '/srv/gbrowse' || $name eq '/srv/gbrowse/s_cerevisiae' || $name eq '/srv/gbrowse/c_elegans'){
                        $html .=
                        qq{
                        <div class="volume_container" id="$snapshot_id" style="background-color:$bgcolor;">
                                <span value="$snapshot_id" onclick="selected('$snapshot_id')"/>$name
                                <span id="attach_info_$snapshot_id" class="attach_info" style="display:$attaching">Attaching...</span>
                                </span>
			<br />
				<div class="info" id="info_$snapshot_id">$info</div>
			</div>}; 
			}			
		$html .= qq{</div></div>
		<div class="attach" id="attached">
			<div class="title_bar"><span class="title">Attached Snapshots</span> <br /></div>
			<div class="sortable attached" style="float:right;">};
			foreach(@attached_volumes){
				my $snapshot_id = $_->snapshotId;
				my $tags = $_->tags;
				my $name = $tags->{ 'Name' };
				my $info;
                	        my $bgcolor;
				my $volume = $ec2->describe_volumes(-filter => {"attachment.instance-id"=>$instance_id, "snapshot-id"=>$snapshot_id});
				my $status = '';
				my $attachment = $volume->attachment if $volume;
				my $status = $attachment->current_status if $volume;
                                my $attaching;
                                # Set the background color based on the status of the volume;
                                if ($status eq 'attached' || $status eq 'busy'){
                                        $bgcolor = '#E2EBFE';
                                        $attaching = 'none';
                                } elsif ($status eq 'attaching'){
                                        $bgcolor = '#eeee33';
                                        $attaching = 'visible';
                                } elsif ($status eq 'detaching'){
                                        $bgcolor = '#ff2233';
                                        $attaching = 'none';
                                }
                                while ( my ($key, $value) = each(%$tags) ) {
                                        unless($key eq 'Name' or $key eq 'Role'){
                                                $info .= "$key: $value<br />";
                                        }
                                }
                                unless($name eq 'Root' || $name eq '/srv/gbrowse' || $name eq '/srv/gbrowse/s_cerevisiae' || $name eq '/srv/gbrowse/c_elegans'){
                        $html .=
                        qq{
                        <div class="volume_container" id="$snapshot_id" style="background-color:$bgcolor;">
                                <span value="$snapshot_id" onclick="selected('$snapshot_id')"/>$name
                                <span id="attach_info_$snapshot_id" class="attach_info" style="display:$attaching">Attaching...</span>
                                </span>
			<br />
				<div class="info" id="info_$snapshot_id">$info</div>
			</div>}; 
			}

		$html .= qq{</div></div></div></div>};
  print $html;
  return;
}

sub error_page
{
 	# An error page for when there is an issue with their information
	my $url = $ENV{HTTP_REFERER};
        my $html = qq{
                <div id="error page" style="margin:0 auto; width: 375px;">
                        <br />
                        <p>There was an error with your information. Please <a href=$url >try again</a>.</p>
                </div>};
        print $html;
        return;
}

sub head
{
  # The header
  my $html = qq{<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
		<title>GBrowse Administration</title>
		<link rel="stylesheet" type="text/css" href="/extras/style.css">
		<link type="text/css" href="/extras/jquery-ui/css/ui-lightness/jquery-ui-1.8.14.custom.css" rel="Stylesheet" />	
		
		<script src="/extras/admin.js" type="text/javascript"></script>   
		<script type="text/javascript" src="/extras/jquery-ui/js/jquery-1.5.1.min.js"></script>
		<script type="text/javascript" src="/extras/jquery-ui/js/jquery-ui-1.8.14.custom.min.js"></script>			
	</head>
	<body onload="load()">
		<div id="header">
			<a class="logo" href="http://gmod.org/wiki/Gbrowse" target="_blank">
				<img alt="GMOD GBrowse" src="/extras/GBrowseLogo.png" width="400" height="95">			
			</a>
		</div>};
  print $html;
  return;
}

sub foot 
{
  my $html = qq{</body>
	</html>};
  print $html;
}
